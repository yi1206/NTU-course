{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "import jieba.analyse\n",
    "import numpy as np\n",
    "\n",
    "word_list = [\"罪\",\"毒品\",\"毒品販運\",\"詐欺\",\"走私\",\"稅務犯罪\",\"組織犯罪\",\"證券犯罪\",\"貪污賄賂\",\"第三方洗錢\",\"毒\",\"詐財\",\n",
    "             \"詐騙\",\"稅\",\"證券\",\"貪污\",\"賄賂\",\"洗錢\",\"販運\",\"稅務\",\"黑錢\",\"仿冒\",\"盜版\",\"侵害\",\"侵害營業秘密\",\"營業秘密\",\n",
    "             \"非法\",\"武器\",\"非法販運武器\",\"販運武器\",\"贓物\",\"贓款\",\"黑市\",\"竊盜\",\"綁架\",\"拘禁\",\"妨害自由\",\"犯罪\",\"偽造文書\"]\n",
    "word_list_len = len(word_list)\n",
    "\n",
    "f = open('蘋果日報.txt', 'r',encoding = 'utf8')\n",
    "doc_list = f.read().split(\",\")\n",
    "doc_list_len = len(doc_list)\n",
    "\n",
    "#建立文件對關鍵字的矩陣\n",
    "doc_word_matrix = np.zeros((doc_list_len, word_list_len), int)\n",
    "\n",
    "#建立共現矩陣\n",
    "co_occur_matrix = np.zeros((word_list_len, word_list_len), int)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Building prefix dict from the default dictionary ...\n",
      "Loading model from cache /var/folders/qz/g9qvwxgd5q9fmz12fdbbwtg40000gn/T/jieba.cache\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "word:罪\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Loading model cost 0.671 seconds.\n",
      "Prefix dict has been built succesfully.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "word:毒品\n",
      "word:毒品販運\n",
      "word:詐欺\n",
      "word:走私\n",
      "word:稅務犯罪\n",
      "word:組織犯罪\n",
      "word:證券犯罪\n",
      "word:貪污賄賂\n",
      "word:第三方洗錢\n",
      "word:毒\n",
      "word:詐財\n",
      "word:詐騙\n",
      "word:稅\n",
      "word:證券\n",
      "word:貪污\n",
      "word:賄賂\n",
      "word:洗錢\n",
      "word:販運\n",
      "word:稅務\n",
      "word:黑錢\n",
      "word:仿冒\n",
      "word:盜版\n",
      "word:侵害\n",
      "word:侵害營業秘密\n",
      "word:營業秘密\n",
      "word:非法\n",
      "word:武器\n",
      "word:非法販運武器\n",
      "word:販運武器\n",
      "word:贓物\n",
      "word:贓款\n",
      "word:黑市\n",
      "word:竊盜\n",
      "word:綁架\n",
      "word:拘禁\n",
      "word:妨害自由\n",
      "word:犯罪\n",
      "word:偽造文書\n"
     ]
    }
   ],
   "source": [
    "#紀錄matrix\n",
    "for idx,word in enumerate(word_list):\n",
    "    print(\"word:\" + word)\n",
    "    for idy,doc in enumerate(doc_list):\n",
    "        #print(\"doc:\" + str(idy))\n",
    "        seg_list = jieba.cut(doc) #斷詞後為generator\n",
    "        seg_str = \",\".join(seg_list) #接成字串\n",
    "        seg_str_list = seg_str.split(\",\") #string用\",\"切開存成list\n",
    "        for idz,seg in enumerate(seg_str_list):\n",
    "            if word == seg:\n",
    "                #print(\"doc\" + str(idy+1) + \"的第\" + str(idz) + \"個字：\" + seg + \" == word:\" + word)\n",
    "                doc_word_matrix[idy][idx] = 1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[0 1 0 ... 0 0 0]\n",
      " [0 1 0 ... 0 0 0]\n",
      " [0 1 0 ... 0 0 0]\n",
      " ...\n",
      " [0 0 0 ... 0 1 0]\n",
      " [0 0 0 ... 0 1 0]\n",
      " [0 0 0 ... 0 1 0]]\n"
     ]
    }
   ],
   "source": [
    "print(doc_word_matrix)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "for idx1,word in enumerate(word_list): #左到右跑每一個word\n",
    "    for idx2,word_2_compare in enumerate(word_list): #跑要比較的word\n",
    "        for idy,doc in enumerate(doc_list): #跑每一份文件\n",
    "            if idx1 != idx2:\n",
    "                if doc_word_matrix[idy][idx1] == doc_word_matrix[idy][idx2]: #word和word2compare在doc[idy]同時出現\n",
    "                    co_occur_matrix[idx1][idx2] += 1\n",
    "                    #co_occur_matrix[idx2][idx1] += 1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[ 0 51 69 ... 69 46 69]\n",
      " [51  0 59 ... 59 38 59]\n",
      " [69 59  0 ... 77 44 77]\n",
      " ...\n",
      " [69 59 77 ...  0 44 77]\n",
      " [46 38 44 ... 44  0 44]\n",
      " [69 59 77 ... 77 44  0]]\n"
     ]
    }
   ],
   "source": [
    "print(co_occur_matrix)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "co_occur_matrix.tofile('matrix.txt', ' ')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.1"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
